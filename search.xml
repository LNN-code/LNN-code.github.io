<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>专业实习作业（七）</title>
    <url>/2021/11/02/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0%E4%BD%9C%E4%B8%9A%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h2><span id="题目"> 题目：</span></h2>
<p>客户信息包括：姓名、年龄、积分</p>
<ol>
<li>实现添加客户信息</li>
<li>实现所有客户信息显示</li>
<li>对客户的积分进行排序（升序、降序）</li>
</ol>
<p>实现方式：<br>
A、使用 多个“数组”来完成<br>
B、使用“对象数组”来完成</p>
<p>推荐使用：数组作为方法参数 和 对象作为方法参数 来完成</p>
<h2><span id="代码部分"> 代码部分</span></h2>
<h3><span id="clientjava"> Client.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> max=<span class="number">10</span>;</span><br><span class="line">    <span class="comment">//属性声明</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age,point;</span><br><span class="line">    <span class="comment">//对象数组</span></span><br><span class="line">    Client[] clients=<span class="keyword">new</span> Client[max];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入客户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddInformation</span><span class="params">(Client C,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;max)&#123;</span><br><span class="line">            clients[i]=<span class="keyword">new</span> Client();<span class="comment">//实例化对象数组</span></span><br><span class="line">            clients[i].name= C.name;</span><br><span class="line">            clients[i].age= C.age;</span><br><span class="line">            clients[i].point=C.point;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//显示客户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户姓名\t客户年龄\t客户积分&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;j;i++) &#123;</span><br><span class="line">            System.out.println(clients[i].name + <span class="string">&quot;\t&quot;</span> + clients[i].age + <span class="string">&quot;\t&quot;</span> + clients[i].point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">upsort</span><span class="params">(<span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">        <span class="comment">//声明变量</span></span><br><span class="line">        <span class="keyword">int</span> flag;</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;z-<span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; z-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clients[j].point &gt; clients[j+<span class="number">1</span>].point) &#123;</span><br><span class="line">                    flag = clients[j].point;</span><br><span class="line">                    clients[j].point = clients[j+<span class="number">1</span>].point;</span><br><span class="line">                    clients[j+<span class="number">1</span>].point = flag;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示排序后的信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的客户信息是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;z;i++) &#123;</span><br><span class="line">            System.out.println(clients[i].name + <span class="string">&quot;\t&quot;</span> + clients[i].age + <span class="string">&quot;\t&quot;</span> + clients[i].point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="testclientjava"> TestClient.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//变量声明（i作为输入结束的条件，j为输入次数）</span></span><br><span class="line">        String i;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Client customer =<span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入客户姓名：&quot;</span>);</span><br><span class="line">            customer.name=in.next();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入客户年龄：&quot;</span>);</span><br><span class="line">            customer.age=in.nextInt();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入客户积分：&quot;</span>);</span><br><span class="line">            customer.point=in.nextInt();</span><br><span class="line">            customer.AddInformation(customer,j++);</span><br><span class="line">            System.out.print(<span class="string">&quot;是否继续输入[Y/N]：&quot;</span>);</span><br><span class="line">            i=in.next();</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="string">&quot;y&quot;</span>.equalsIgnoreCase(i));</span><br><span class="line">        customer.show(j);</span><br><span class="line">        customer.upsort(j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>专业实习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>专业实习（七）</title>
    <url>/2021/11/02/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1><span id="day05-java基础"> Day05-Java基础</span></h1>
<!-- toc -->
<ul>
<li><a href="#%E5%9B%9E%E9%A1%BE">回顾</a></li>
<li><a href="#1%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89">1：类的方法定义</a></li>
<li><a href="#2%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">2：类方法的调用</a></li>
<li><a href="#3%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BA%86%E8%A7%A3">3：成员变量和局部变量（了解）</a></li>
<li><a href="#4%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%E9%87%8D%E9%9A%BE%E7%82%B9">4：调用带参数的方法(重难点)</a>
<ul>
<li><a href="#4-1%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0">4-1：参数类型：形式参数</a></li>
<li><a href="#4-2%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9E%E9%99%85%E5%8F%82%E6%95%B0">4-2：参数类型：实际参数</a></li>
</ul>
</li>
<li><a href="#1%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%96%B9%E5%BC%8F%E9%87%8D%E9%9A%BE%E7%82%B9">1：参数传递方式（重难点）</a>
<ul>
<li><a href="#1-1%E6%8C%89%E5%80%BC%E4%BC%A0%E9%80%92">1-1：按值传递</a></li>
<li><a href="#1-2%E6%8C%89%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92">1-2：按引用传递</a></li>
</ul>
</li>
<li><a href="#2string%E5%AD%97%E7%AC%A6%E4%B8%B2">2：String字符串</a>
<ul>
<li><a href="#2-1%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F3%E4%B8%AD%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F">2-1：字符串声明方式（3中声明方式）</a></li>
<li><a href="#2-2%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95">2-2：字符串处理方法</a>
<ul>
<li><a href="#2-2-1%E8%8E%B7%E5%BE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%80%BB%E9%95%BF%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95">2-2-1：获得字符串总长度的方法</a></li>
<li><a href="#2-2-2%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E6%96%B9%E6%B3%95">2-2-2：字符串比较方法</a></li>
<li><a href="#2-2-3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%96%B9%E6%B3%95">2-2-3：字符串拼接方法</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="回顾"> 回顾</span></h2>
<p>1：类的无参数方法定义与使用</p>
<p>2：类的有参数方法定义与使用</p>
<h2><span id="1类的方法定义"> 1：类的方法定义</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line">访问修饰符   方法的返回值类型   方法名( 参数列表... )&#123;</span><br><span class="line">	<span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>理解方式：定义方法可以为C语言当中函数，也可以理解一个功能块</p>
<p><strong>两种方式：</strong></p>
<p>1：方法如果规定了返回值类型，则该方法返回值的数据类型必须与定义的返回值类型相符，使用 return 关键字返回方法的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值 \ 表达式; </span><br></pre></td></tr></table></figure>
<p>return 关键字的作用：结束方法，返回结果</p>
<p><strong>注意：返回结果有且只能有一个，不能有多个</strong></p>
<p>2：方法如果没有返回值，则可以使用 void 关键字进行标识</p>
<h2><span id="2类方法的调用"> 2：类方法的调用</span></h2>
<p><img src="https://i.loli.net/2021/11/02/Wb4VH3CGKrIJhfe.jpg" alt="无标题.jpg"></p>
<h2><span id="3成员变量和局部变量了解"> 3：成员变量和局部变量（了解）</span></h2>
<p>概念：变量声明的位置决定了变量可以使用的一些区域范围。</p>
<p><strong>变量根据作用域分为两种类型：</strong></p>
<p>局部变量：该变量只能在定义它的方法中有效，方法外将无法访问。Java 不会给局部变量赋予初始值</p>
<p>成员变量：定义在类中的，它的作用域将是在整个类中是可见的，也可以使用的。Java 会给成员变量赋予一个初始值</p>
<p><strong>注意：在同一个方法中不能有同名的局部变量，在不同的方法中可以有同名的局部变量。在一个类中，局部变量可以和成员变量同名，局部变量比成员变量更具有优先级。</strong></p>
<h2><span id="4调用带参数的方法重难点"> 4：调用带参数的方法(重难点)</span></h2>
<h3><span id="4-1参数类型形式参数"> 4-1：参数类型：形式参数</span></h3>
<p>概念：形式参数简称：形参。它是在定义方法的时候对方法参数的称呼，起到了标识的作用，告诉方法的调用者如果想调用这个方法必须提供什么样子的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性定义</span></span><br><span class="line"><span class="comment">//    double number1,number2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义计算的方法(参数为 操作数1，操作数2，运算符)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">compute</span><span class="params">(<span class="keyword">double</span> number1,<span class="keyword">double</span> number2,<span class="keyword">char</span> operator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">               <span class="keyword">return</span> number1+<span class="string">&quot; + &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1+number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; - &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1-number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; * &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1*number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; / &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1/number2);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;您输入的运算符不正确,无法完成计算!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="4-2参数类型实际参数"> 4-2：参数类型：实际参数</span></h3>
<p>概念：实际参数简称：实参。它是在调用方法的时候对方法参数的称呼，它里面标识着实际的数值，必须与形式参数一一匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算器的测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 1: 实例化一个计算器对象</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: 提示用户输入两个操作数并作为运算的依据</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第一个操作数:&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num1 = in.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第二个操作数:&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num2 = in.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 提示用户输入操作符</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入运算符&lt;+,-,*,/&gt;:&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> oper = in.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4: 调用计算器类中的计算方法，通过传入的运算符参数来给出运算结果</span></span><br><span class="line">        System.out.println( calculator.compute(num1,num2,oper) ); <span class="comment">// 调用带参数并且带返回值的方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<p>事项1：实参必须与形参的顺序一致</p>
<p>事项2：实参必须与形参的类型一致</p>
<p>事项3：实参必须与形参的个数一致</p>
<hr>
<p>今日内容：</p>
<p>1：参数传递方式</p>
<p>2：字符串处理方法</p>
<hr>
<h2><span id="1参数传递方式重难点"> 1：参数传递方式（重难点）</span></h2>
<h3><span id="1-1按值传递"> 1-1：按值传递</span></h3>
<p>NumberManager.java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个数字管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个交换两个数值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeNumber</span><span class="params">(<span class="keyword">int</span> number1,<span class="keyword">int</span> number2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = number1;</span><br><span class="line">        number1 = number2;</span><br><span class="line">        number2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TestNumberManager.java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumberManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1: 实例化数字管理类对象</span></span><br><span class="line">        NumberManager numberManager = <span class="keyword">new</span> NumberManager();</span><br><span class="line">        <span class="comment">//2: 声明两个整数变量并赋值</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">50</span>,num2 = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//3: 输出交换前的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换前:num1=&quot;</span>+num1+<span class="string">&quot;\tnum2=&quot;</span>+num2);</span><br><span class="line">        <span class="comment">//4: 调用交换两个数值的方法</span></span><br><span class="line">        numberManager.changeNumber(num1,num2);</span><br><span class="line">        <span class="comment">//5: 输出交换后的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换后:num1=&quot;</span>+num1+<span class="string">&quot;\tnum2=&quot;</span>+num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：按值传递方式是指：实际参数将自己的值 复制了一份 给了形式参数，因此形式参数在对其值做任何改变的时候将不会影响到实际参数</p>
<h3><span id="1-2按引用传递"> 1-2：按引用传递</span></h3>
<p>NumberManager.java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个数字管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个交换两个数值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeNumber</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = numbers[<span class="number">0</span>];</span><br><span class="line">        numbers[<span class="number">0</span>] = numbers[<span class="number">1</span>];</span><br><span class="line">        numbers[<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TestNumberManager.java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNumberManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1: 实例化数字管理类对象</span></span><br><span class="line">        NumberManager numberManager = <span class="keyword">new</span> NumberManager();</span><br><span class="line">        <span class="comment">//2: 声明两个整数变量并赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">50</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">//3: 输出交换前的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换前:nums[0]=&quot;</span>+nums[<span class="number">0</span>]+<span class="string">&quot;\tnums[1]=&quot;</span>+nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//4: 调用交换两个数值的方法</span></span><br><span class="line">        numberManager.changeNumber(nums); </span><br><span class="line">        <span class="comment">// 按引用方式传递，实际参数传递 过去的实际上是 nums 数组的首地址（内存地址）,所以当形式参数改变内容时直接将会影响实际参数的值</span></span><br><span class="line">        <span class="comment">//5: 输出交换后的数值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换后:nums[0]=&quot;</span>+nums[<span class="number">0</span>]+<span class="string">&quot;\tnums[1]=&quot;</span>+nums[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：按引用方式传递：实际参数将自己的 内存地址 给了形式参数，它们两现在共用的是同一个内存地址，因此形式参数在对该内存地址保存的值进行修改时将会直接影响到实际参数的值。</p>
<p><strong>总结：</strong></p>
<p>参数按值传递的情形：Java中的基本数据类型都是按值传递，比如：int、double、char</p>
<p>参数按引用传递的情形：类、对象、数组、接口、集合</p>
<p><strong>方法使用的总结：</strong></p>
<p>1： 没有返回值没有参数的方法</p>
<p>2： 有返回值没有参数的方法</p>
<p>3： 没有返回值有参数的方法</p>
<p>4： 有返回值有参数的方法</p>
<h2><span id="2string字符串"> 2：String字符串</span></h2>
<h3><span id="2-1字符串声明方式3中声明方式"> 2-1：字符串声明方式（3中声明方式）</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;字符串内容&quot;</span>;</span><br><span class="line">String s = <span class="keyword">new</span> String();  <span class="comment">// 声明并实例化了一个 内容为空 的String类型的对象</span></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;字符串内容&quot;</span>);  <span class="comment">// 声明并实例化一个 有内容 的String类型的对象</span></span><br></pre></td></tr></table></figure>
<h3><span id="2-2字符串处理方法"> 2-2：字符串处理方法</span></h3>
<h4><span id="2-2-1获得字符串总长度的方法"> 2-2-1：获得字符串总长度的方法</span></h4>
<p>length()：该方法返回值为 int 类型，它返回字符串中字符的总个数（包含字符串中的空格在内）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    获得字符串长度的方法 length()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明并初始化一个字符串对象</span></span><br><span class="line">        String s = <span class="string">&quot;Hello New World!&quot;</span>;</span><br><span class="line">        <span class="comment">// 输出显示字符串总长度</span></span><br><span class="line">        System.out.println(<span class="string">&quot;字符串s对象的长度是:&quot;</span>+s.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="2-2-2字符串比较方法"> 2-2-2：字符串比较方法</span></h4>
<p>方法1：</p>
<p>equals()：区分大小写比较两个字符串中的内容是否 完全一直，该方法的返回值为 boolean 类型。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> *    字符串比较方法1: equals()</span><br><span class="line"> *         登录验证</span><br><span class="line"> */</span><br><span class="line">public class StringDemo2 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner in = new Scanner(System.in);</span><br><span class="line">        // 1:创建 用户名 和 密码字符串对象</span><br><span class="line">        String username,password;</span><br><span class="line"></span><br><span class="line">        // 2:提示用户输入用户名跟密码</span><br><span class="line">        System.out.print(&quot;请输入用户名:&quot;);</span><br><span class="line">        username = in.next();</span><br><span class="line">        System.out.print(&quot;请输入密码:&quot;);</span><br><span class="line">        password = in.next();</span><br><span class="line"></span><br><span class="line">        // 3: 比较用户名和密码是否与目标的相符</span><br><span class="line">        if( username.equals(&quot;tom&quot;) &amp;&amp; password.equals(&quot;123456&quot;))</span><br><span class="line">            System.out.println(&quot;登录成功!&quot;);</span><br><span class="line">        else</span><br><span class="line">            System.err.println(&quot;抱歉,您的用户名或密码有误,登录失败！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法2：</p>
<p>equalsIgnoreCase() 不区分大小写比较两个字符串中的内容是否相等，该方法返回一个 boolean类型的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    字符串比较方法1: equalsIgnoreCase()</span></span><br><span class="line"><span class="comment"> *         登录验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 1:创建 用户名 和 密码字符串对象</span></span><br><span class="line">        String username,password;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2:提示用户输入用户名跟密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">        username = in.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line">        password = in.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 比较用户名和密码是否与目标的相符</span></span><br><span class="line">        <span class="keyword">if</span>( username.equalsIgnoreCase(<span class="string">&quot;tom&quot;</span>) &amp;&amp; password.equalsIgnoreCase(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.err.println(<span class="string">&quot;抱歉,您的用户名或密码有误,登录失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法3：</p>
<p>toLowerCase()：将字符串中的英文字母转换为全小写形式，该方法返回值为 String 类型</p>
<p>toUpperCase()：将字符串中的英文字母转换为全大写形式，该方法返回值为 String 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   字符串比较方法3: toLowerCase().equals()</span></span><br><span class="line"><span class="comment"> *        登录验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 1:创建 用户名 和 密码字符串对象</span></span><br><span class="line">        String username,password;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2:提示用户输入用户名跟密码</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入用户名:&quot;</span>);</span><br><span class="line">        username = in.next();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入密码:&quot;</span>);</span><br><span class="line">        password = in.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 比较用户名和密码是否与目标的相符</span></span><br><span class="line">        <span class="keyword">if</span>( username.toLowerCase().equals(<span class="string">&quot;tom&quot;</span>) &amp;&amp; password.toUpperCase().equals(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.err.println(<span class="string">&quot;抱歉,您的用户名或密码有误,登录失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>“ == ” 与 “equals() ”方法的区别：</p>
<p>“ == ”号：一般用于数值类型的比较，如果用于字符串比较，“ == ”号的作用是比较 两个字符串内存地址是否一致，而不是比较字符串中的内容。</p>
<p>equals() 方法主要用于字符串的内容比较，而不是比较两个字符串的内存地址。</p>
<h4><span id="2-2-3字符串拼接方法"> 2-2-3：字符串拼接方法</span></h4>
<p>concat()：该方法将目标字符串拼接到源字符串的尾部并返回一个拼接后的新字符串，该方法返回 String 类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    字符串处理方法： concat()</span></span><br><span class="line"><span class="comment"> *        输出学员成绩单</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    方式2：采用 concat() 方法完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 声明存放学员科目成绩的变量</span></span><br><span class="line">            <span class="keyword">double</span> java,database,html;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 给学员科目成绩的变量赋值</span></span><br><span class="line">            java = <span class="number">80</span>;</span><br><span class="line">            database = <span class="number">90</span>;</span><br><span class="line">            html = <span class="number">86.7</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用 concat() 方法拼接字符串并输出显示效果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;****** 成绩单 *******&quot;</span>);</span><br><span class="line">            String content = <span class="string">&quot;java:&quot;</span>+java;</span><br><span class="line">            content = content.concat(<span class="string">&quot;\tdatabase:&quot;</span>+database);</span><br><span class="line">            content = content.concat(<span class="string">&quot;\thtml:&quot;</span>+html);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>专业实习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>专业实习（六）</title>
    <url>/2021/11/01/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1><span id="day04-java基础"> Day04-Java基础</span></h1>
<!-- toc -->
<ul>
<li><a href="#%E5%9B%9E%E9%A1%BE">回顾</a></li>
<li><a href="#1%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF">1：嵌套循环</a></li>
<li><a href="#2%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E4%BC%9A%E9%BB%98%E5%86%99">2：冒泡排序算法(必须掌握,会默写)</a></li>
<li><a href="#3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E9%87%8D%E9%9A%BE%E7%82%B9">3： 类和对象（重难点）</a></li>
<li><a href="#%E4%BB%8A%E6%97%A5%E5%86%85%E5%AE%B9">今日内容：</a></li>
<li><a href="#1%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89">1：类的方法定义</a></li>
<li><a href="#2%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8">2：类方法的调用</a></li>
<li><a href="#3%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E4%BA%86%E8%A7%A3">3：成员变量和局部变量（了解）</a></li>
<li><a href="#4%E8%B0%83%E7%94%A8%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%E9%87%8D%E9%9A%BE%E7%82%B9">4：调用带参数的方法(重难点)</a>
<ul>
<li><a href="#4-1%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0">4-1：参数类型：形式参数</a></li>
<li><a href="#4-2%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B%E5%AE%9E%E9%99%85%E5%8F%82%E6%95%B0">4-2：参数类型：实际参数</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="回顾"> 回顾</span></h2>
<p>1、嵌套循环</p>
<p>2、冒泡排序算法、插入法</p>
<p>3、类、对象、方法</p>
<hr>
<h2><span id="1嵌套循环"> 1：嵌套循环</span></h2>
<p>概念：当一个循环被完整的包含在另一个循环体中时，此时的循环结构就被称为嵌套循环</p>
<p><strong>嵌套循环的规律：外循环 1 次，内循环 多 次</strong></p>
<h2><span id="2冒泡排序算法必须掌握会默写"> 2：冒泡排序算法(必须掌握,会默写)</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   数组 + 嵌套循环实现案例</span></span><br><span class="line"><span class="comment"> *    冒泡排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 分析:</span></span><br><span class="line">        <span class="comment">// 1: 创建一个输入对象</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 2: 声明一个可以保存 5 个数值的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 3: 提示用户输入 5 个数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字:&quot;</span>);</span><br><span class="line">            numbers[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4: 利用嵌套 for 循环来进行冒泡排序</span></span><br><span class="line">        <span class="comment">// 5: 外循环：控制比较的轮次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 6: 内循环：控制每一轮比较的次数(每比较一轮要少比较一次)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( numbers[j] &gt; numbers[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 7: 在内循环中设置一个临时变量用户交换数组中两个元素里的值</span></span><br><span class="line">                    <span class="keyword">int</span> temp = numbers[j];</span><br><span class="line">                    numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">                    numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8: 打印显示排序后的效果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后效果如下:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n:numbers) &#123;</span><br><span class="line">            System.out.print(n + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="3-类和对象重难点"> 3： 类和对象（重难点）</span></h2>
<p>概念：</p>
<p>类：类指的就是一种类型，Java中常有的基本数据类型就是其中之一</p>
<p>对象：指的是所属某一个类型的客观存在的真实实物（看得见，摸得着的都称为对象）</p>
<p>属性：一般为名词，指的是对象所具有的公共特征（例如：姓名、年龄、身高、体重等等）</p>
<p>方法：一般为动词，指的是对象所具有的公共行为（例如：吃、喝、拉、撒、跑、跳等等）</p>
<p><strong>记住一句话：类是对象的类型、对象是类的实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义类的语法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类型名称</span>&#123;</span><br><span class="line">    </span><br><span class="line">	数据类型  属性名<span class="number">1</span>;</span><br><span class="line">	数据类型  属性名<span class="number">2</span>;</span><br><span class="line">	数据类型  属性名<span class="number">3</span>;</span><br><span class="line">	......</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 方法1();</span></span><br><span class="line">	<span class="comment">// 方法2();</span></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用对象的步骤:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步：</span></span><br><span class="line">   类名 对象名 = <span class="keyword">new</span> 类名(); <span class="comment">// 类名可以理解跟变量名是一样的，都要有意义的存在</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 第二步:</span></span><br><span class="line">   通过对象的 <span class="string">&quot; . &quot;</span> 符号类访问类中定义的成员（成员属性 和 成员方法）</span><br><span class="line">   对象名.属性名 = 属性值;</span><br><span class="line">   </span><br><span class="line">   对象名.方法名();   <span class="comment">// 调用方法，执行方法里面的代码</span></span><br></pre></td></tr></table></figure>
<h2><span id="今日内容"> 今日内容：</span></h2>
<p>1：类的无参数方法定义与使用</p>
<p>2：类的有参数方法定义与使用</p>
<h2><span id="1类的方法定义"> 1：类的方法定义</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法：</span></span><br><span class="line">访问修饰符   方法的返回值类型   方法名( 参数列表... )&#123;</span><br><span class="line">	<span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>理解方式：定义方法可以为C语言当中函数，也可以理解一个功能块</p>
<p><strong>两种方式：</strong></p>
<p>1：方法如果规定了返回值类型，则该方法返回值的数据类型必须与定义的返回值类型相符，使用 return 关键字返回方法的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> 返回值 \ 表达式;</span><br></pre></td></tr></table></figure>
<p>return 关键字的作用：结束方法，返回结果</p>
<p><strong>注意：返回结果有且只能有一个，不能有多个</strong></p>
<p>2：方法如果没有返回值，则可以使用 void 关键字进行标识</p>
<h2><span id="2类方法的调用"> 2：类方法的调用</span></h2>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211101113211431.png" alt="image-20211101113211431"></p>
<h2><span id="3成员变量和局部变量了解"> 3：成员变量和局部变量（了解）</span></h2>
<p>概念：变量声明的位置决定了变量可以使用的一些区域范围。</p>
<p><strong>变量根据作用域分为两种类型：</strong></p>
<p>局部变量：该变量只能在定义它的方法中有效，方法外将无法访问。Java 不会给局部变量赋予初始值</p>
<p>成员变量：定义在类中的，它的作用域将是在整个类中是可见的，也可以使用的。Java 会给成员变量赋予一个初始值</p>
<p><strong>注意：在同一个方法中不能有同名的局部变量，在不同的方法中可以有同名的局部变量。在一个类中，局部变量可以和成员变量同名，局部变量比成员变量更具有优先级。</strong></p>
<h2><span id="4调用带参数的方法重难点"> 4：调用带参数的方法(重难点)</span></h2>
<h3><span id="4-1参数类型形式参数"> 4-1：参数类型：形式参数</span></h3>
<p>概念：形式参数简称：形参。它是在定义方法的时候对方法参数的称呼，起到了标识的作用，告诉方法的调用者如果想调用这个方法必须提供什么样子的参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性定义</span></span><br><span class="line"><span class="comment">//    double number1,number2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义计算的方法(参数为 操作数1，操作数2，运算符)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">compute</span><span class="params">(<span class="keyword">double</span> number1,<span class="keyword">double</span> number2,<span class="keyword">char</span> operator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (operator)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">               <span class="keyword">return</span> number1+<span class="string">&quot; + &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1+number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; - &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1-number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; * &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1*number2);</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> number1+<span class="string">&quot; / &quot;</span>+number2 + <span class="string">&quot; = &quot;</span>+(number1/number2);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;您输入的运算符不正确,无法完成计算!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="4-2参数类型实际参数"> 4-2：参数类型：实际参数</span></h3>
<p>概念：实际参数简称：实参。它是在调用方法的时候对方法参数的称呼，它里面标识着实际的数值，必须与形式参数一一匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算器的测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 1: 实例化一个计算器对象</span></span><br><span class="line">        Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: 提示用户输入两个操作数并作为运算的依据</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第一个操作数:&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num1 = in.nextDouble();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入第二个操作数:&quot;</span>);</span><br><span class="line">        <span class="keyword">double</span> num2 = in.nextDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 提示用户输入操作符</span></span><br><span class="line">        System.out.print(<span class="string">&quot;请输入运算符&lt;+,-,*,/&gt;:&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> oper = in.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4: 调用计算器类中的计算方法，通过传入的运算符参数来给出运算结果</span></span><br><span class="line">        System.out.println( calculator.compute(num1,num2,oper) ); <span class="comment">// 调用带参数并且带返回值的方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong></p>
<p>事项1：实参必须与形参的顺序一致</p>
<p>事项2：实参必须与形参的类型一致</p>
<p>事项3：实参必须与形参的个数一致</p>
]]></content>
      <categories>
        <category>专业实习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA包装类</title>
    <url>/2021/11/01/Java%E5%8C%85%E8%A3%85%E7%B1%BB/</url>
    <content><![CDATA[<h1><span id="java包装类"> JAVA包装类</span></h1>
<!-- toc -->
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B%E5%AF%B9%E5%BA%94%E7%9A%848%E4%B8%AA%E5%8C%85%E8%A3%85%E7%B1%BB">基础类型对应的8个包装类</a></li>
<li><a href="#%E4%BB%A3%E7%A0%81%E5%AE%9E%E4%BE%8B">代码实例</a>
<ul>
<li><a href="#integertest01java">IntegerTest01.java</a></li>
<li><a href="#integertest02java">IntegerTest02.java</a></li>
<li><a href="#integertest03java">IntegerTest03.java</a></li>
<li><a href="#integertest04java">IntegerTest04.java</a></li>
<li><a href="#integertest05java">IntegerTest05.java</a></li>
<li><a href="#integertest06java">IntegerTest06.java</a></li>
<li><a href="#integertest07java">IntegerTest07.java</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="基础类型对应的8个包装类"> 基础类型对应的8个包装类</span></h2>
<p><strong>java中为8中基本数据类型又对应准备了8中包装类。8种包装类属于引用数据类型，父类是Object</strong></p>
<p>Q：为什么要再提供8种包装类？</p>
<p>​		A：因为8中基本类型不够用，所以又提供了对应的8中包装类型</p>
<p><strong>8种基本数据类型</strong>对应的包装类型名是什么？</p>
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">基本数据类型</th>
<th style="text-align:center">包装类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">byte</td>
<td style="text-align:center">java.lang.Byte(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">short</td>
<td style="text-align:center">java.lang.Short(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">int</td>
<td style="text-align:center">java.lang.Integer(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">long</td>
<td style="text-align:center">java.lang.Long(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">float</td>
<td style="text-align:center">java.lang.Float(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">double</td>
<td style="text-align:center">java.lang.Double(父类：number)</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">boolean</td>
<td style="text-align:center">java.lang.Boolean(父类：object)</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">char</td>
<td style="text-align:center">java.lang.Character(父类：object)</td>
</tr>
</tbody>
</table>
<p>以上8种包装类中，以“java.lang.Interger”为例，其他的与这个相同</p>
<p>String int Integer三种类型互换</p>
<hr>
<p>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String--------------------------&gt;<span class="keyword">int</span></span><br><span class="line">   		Integer.ParseInt(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line">​<span class="keyword">int</span>-----------------------------&gt;String</span><br><span class="line">	  String.ValueOf(<span class="keyword">int</span>)/数字+<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String--------------------------&gt;Integer</span><br><span class="line">		 Integer.ValueOf(<span class="string">&quot;123&quot;</span>)</span><br><span class="line"></span><br><span class="line">​Integer-------------------------&gt;String</span><br><span class="line">		String.ValueOf(Integer对象)</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>------------------------------&gt;Integer</span><br><span class="line">	 自动装箱 Integer.ValueOf(<span class="number">100</span>)</span><br><span class="line">	 </span><br><span class="line">​Integer--------------------------&gt;<span class="keyword">int</span></span><br><span class="line">			自动拆箱 intValue()方法	</span><br></pre></td></tr></table></figure>
<h2><span id="代码实例"> 代码实例</span></h2>
<h3><span id="integertest01java"> IntegerTest01.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：调用dosome()方法的时候需要传一个数字进去。但是数字属于基本数据类型，而dosome()方法参数的类型是Object</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可见dosome()方法无法接收基本数据类型的数字。那怎么办？可以传一个数字对应的包装类进去</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    方法一：创建一个类，将数字传入类中，再将类传入dosome()中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="comment">//这种类目前是自己写，实际开发中不需要，可以直接调用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">number</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">number</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//把100这个数字经过构造方法包装成对象        </span></span><br><span class="line">        number num=<span class="keyword">new</span> number(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//dosome不能直接传100，但是可以传一个100对应的包装类型</span></span><br><span class="line">        doSome(num);</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSome</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="integertest02java"> IntegerTest02.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    number中的公共方法：number是一个抽象类，无法实例化对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//123这个基本数据类型，进行构造方法的包装达到了，基本数据类型向引用数据类型的转换</span></span><br><span class="line">        <span class="comment">//基本数据类型-(转换为)--&gt;引用数据类型(装箱)</span></span><br><span class="line">        Integer i = <span class="keyword">new</span> Integer(<span class="number">123</span>);<span class="comment">//这种构造方法已过时，八种基本数据类型包装类都可以这样声明</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将引用数据类型-(转换为)-&gt;基本数据类型</span></span><br><span class="line">        <span class="keyword">float</span> f =i.floatValue();</span><br><span class="line">        System.out.println(f);<span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将引用数据类型-(转换)-&gt;基本数据类型(拆箱)</span></span><br><span class="line">        <span class="keyword">int</span> value=i.intValue();</span><br><span class="line">        System.out.println(value);<span class="comment">//123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="integertest03java"> IntegerTest03.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过访问包装类的常量，来获取最大值和最小值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int的最大值：&quot;</span> + Integer.MAX_VALUE);</span><br><span class="line">        System.out.println(<span class="string">&quot;int的最小值：&quot;</span> + Integer.MIN_VALUE);</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte的最大值：&quot;</span> + Byte.MAX_VALUE);</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte的最小值：&quot;</span> + Byte.MIN_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="integertest04java"> IntegerTest04.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    自动装箱和自动拆箱</span></span><br><span class="line"><span class="comment">        自动装箱：基本数据类型自动转换成包装类</span></span><br><span class="line"><span class="comment">        自动拆箱：包装类自动转换成基本数据类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    有了自动拆装箱之后，Number类中的方法就用不着了</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    好处：方便编程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        Integer i = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> j=i;</span><br><span class="line">        System.out.println(j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分析：为什么下面代码的没有报错</span></span><br><span class="line">        Integer x=<span class="number">100</span>;<span class="comment">//x是一个引用，z是一个变量，z还是保存了一个对象的内存地址，相等于：integer z=new Integer(100);</span></span><br><span class="line">        System.out.println(x + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//原因：x在输出的时候自动拆箱转换成基本数据类型(只有在 + - * /的时候才会触发自动拆装箱)</span></span><br><span class="line">        <span class="comment">//+两边要求是基本数据类型的数字，z是包装类，不属于基本数据类型，这里会进行自动拆箱。将z转换成基本数据类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="integertest05java"> IntegerTest05.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析以下程序是为什么？integer重要面试题******</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        Integer a=<span class="number">128</span>;</span><br><span class="line">        Integer b=<span class="number">128</span>;</span><br><span class="line">        System.out.println(a == b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            java中为了提高程序执行效率，将[-128-127]之间所有的包装对象提前创建好，放到了一个方法区的&quot;整数型常量池&quot;当中，</span></span><br><span class="line"><span class="comment">            目的是只有用这个区间的数据就不需要再new了，直接从整数型常量池中取出来</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            换句话说，如果数是[-128-127之间的数]，则变量直接指向整数型常量池中的那个数，如果不是区间的数则会在堆中创建一个新对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            原理：x变量中保存的对象的内存地址和y变量中保存的内存地址是一样的</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Integer x=<span class="number">100</span>;</span><br><span class="line">        Integer y=<span class="number">100</span>;</span><br><span class="line">        System.out.println(x == y);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="integertest06java"> IntegerTest06.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    重点方法：static int parseInt(String s) 静态方法，传参String,返回int</span></span><br><span class="line"><span class="comment">    其余7个基本数据类型都有此方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    为什么这个方法常用？</span></span><br><span class="line"><span class="comment">    例如：在网页上文本框输入的100实际上是&quot;100&quot;字符串。后台数据库中要求存储100数字，此时java程序需要将&quot;100&quot;转换成100数字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a=<span class="keyword">new</span> Integer(<span class="string">&quot;123&quot;</span>);<span class="comment">//编译可以通过，正常运行</span></span><br><span class="line">       <span class="comment">// Integer b=new Integer(&quot;中文&quot;);//编译通过，可以正常运行吗？不能：报错：java.lang.NumberFormatException</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> vale=Integer.parseInt(<span class="string">&quot;123&quot;</span>);<span class="comment">//同样此处的字符串不能写中文！会报NumberFormatException错误</span></span><br><span class="line">        System.out.println(a+<span class="string">&quot;|&quot;</span>+vale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3><span id="integertest07java"> IntegerTest07.java</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String----&gt;int</span></span><br><span class="line">        <span class="keyword">int</span> i=Integer.parseInt(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;String:100&quot;</span> + <span class="string">&quot;-&gt;&quot;</span> + <span class="string">&quot;int:&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int----&gt;String</span></span><br><span class="line">        String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;int----&gt;String&quot;</span>+str+<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int----&gt;Integer</span></span><br><span class="line">        <span class="comment">//自动装箱</span></span><br><span class="line">        Integer j=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Integer----&gt;int</span></span><br><span class="line">        <span class="comment">//自动拆箱</span></span><br><span class="line">        <span class="keyword">int</span> k=j;</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer----&gt;int&quot;</span>+k);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String----&gt;Integer</span></span><br><span class="line">        Integer l=Integer.valueOf(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Integer----&gt;String</span></span><br><span class="line">        String str1=String.valueOf(l);</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer-&gt;String&quot;</span>+str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java学习</tag>
      </tags>
  </entry>
  <entry>
    <title>专业实习（五）</title>
    <url>/2021/10/29/%E4%B8%93%E4%B8%9A%E5%AE%9E%E4%B9%A0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<h1><span id="专业实习五"> 专业实习（五）</span></h1>
<p>[TOC]</p>
<!-- toc -->
<ul>
<li><a href="#%E5%9B%9E%E9%A1%BE">回顾</a></li>
<li><a href="#1%E7%AE%80%E5%8D%95%E7%9A%84%E8%BE%93%E5%85%A5%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%BA%86%E8%A7%A3">1：简单的输入异常处理（了解）</a></li>
<li><a href="#2while%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1">2：while循环结构（必须掌握）</a>
<ul>
<li><a href="#2-1while%E5%BE%AA%E7%8E%AF">2-1：while循环</a></li>
<li><a href="#2-2dowhile%E5%BE%AA%E7%8E%AF">2-2：do…while循环</a></li>
<li><a href="#2-3for%E5%BE%AA%E7%8E%AF">2-3：for循环</a></li>
<li><a href="#2-4foreach%E5%BE%AA%E7%8E%AF">2-4：foreach循环</a></li>
</ul>
</li>
<li><a href="#3break%E5%85%B3%E9%94%AE%E5%AD%97">3：break关键字</a></li>
<li><a href="#4continue%E5%85%B3%E9%94%AE%E5%AD%97">4：continue关键字</a></li>
<li><a href="#5%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84%E7%9A%84%E6%80%BB%E7%BB%93%E9%87%8D%E7%82%B9">5：循环结构的总结（重点）</a></li>
<li><a href="#6java%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84%E4%BA%86%E8%A7%A3">6：Java中的数组（了解）</a></li>
<li><a href="#%E4%BB%8A%E6%97%A5%E5%86%85%E5%AE%B9">今日内容：</a></li>
<li><a href="#1%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF">1：嵌套循环</a></li>
<li><a href="#2%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%BF%85%E9%A1%BB%E6%8E%8C%E6%8F%A1%E4%BC%9A%E9%BB%98%E5%86%99">2：冒泡排序算法(必须掌握,会默写)</a></li>
<li><a href="#3-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%E9%87%8D%E9%9A%BE%E7%82%B9">3： 类和对象（重难点）</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B">案例</a>
<ul>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%80">案例一：</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%BA%8C">案例二：</a></li>
<li><a href="#%E6%A1%88%E4%BE%8B%E4%B8%89">案例三：</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="回顾"> 回顾</span></h2>
<h2><span id="1简单的输入异常处理了解"> 1：简单的输入异常处理（了解）</span></h2>
<p>利用 Scanner 对象的 hasNextXXXX() 方法来判断用户输入的内容是否跟我们所要求的是一样的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   处理系统异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个输入对象</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 声明一个保存用户输入数值的变量</span></span><br><span class="line">        <span class="keyword">int</span> number;</span><br><span class="line">        <span class="comment">// 显示并要求用户选择的界面</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------欢迎来到个人信息管理界面--------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;                1: 修改个人信息                 &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;                2: 登出系统                    &quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------------------------&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>( in.hasNextInt() ) &#123;</span><br><span class="line">            number = in.nextInt();</span><br><span class="line">            <span class="comment">// 对用户的选择进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (number == <span class="number">1</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;进入到修改个人信息界面中...&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (number == <span class="number">2</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;正在登出当前系统...&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.err.println(<span class="string">&quot;功能正在完善中...&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.err.println(<span class="string">&quot;您输入的不是数字!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="2while循环结构必须掌握"> 2：while循环结构（必须掌握）</span></h2>
<p>为什么要使用循环？什么情况下使用循环？</p>
<p>当程序中需要执行重复性的操作或者代码块的时候可以考虑使用循环结构来处理。</p>
<h3><span id="2-1while循环"> 2-1：while循环</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法:</span></span><br><span class="line"><span class="keyword">while</span>( 循环的条件 )&#123;</span><br><span class="line">	<span class="comment">// 循环体, 循环操作的部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while循环结构的特性：先判断，后执行的循环。</p>
<p>使用场景：当循环次数 不固定 的情况下使用该循环比较合适。</p>
<h3><span id="2-2dowhile循环"> 2-2：do…while循环</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法:</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">   <span class="comment">// 循环体，循环操作的部分</span></span><br><span class="line">&#125;<span class="keyword">while</span>( 循环的条件 );</span><br></pre></td></tr></table></figure>
<p>do…while循环结构的特性：先执行，后判断的循环。</p>
<p>使用场景：当需要先执行 1 次然后再决定是否循环继续循环时可以考虑使用该循环。</p>
<h3><span id="2-3for循环"> 2-3：for循环</span></h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法:</span></span><br><span class="line"><span class="keyword">for</span>( 表达式<span class="number">1</span> ; 表达式<span class="number">2</span> ; 表达式<span class="number">3</span> )&#123;</span><br><span class="line">     <span class="comment">// 循环操作,循环体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释:</span></span><br><span class="line">表达式<span class="number">1</span>：声明并初始化循环变量的位置</span><br><span class="line">表达式<span class="number">2</span>：设置循环条件的位置</span><br><span class="line">表达式<span class="number">3</span>：更新循环变量值的位置</span><br></pre></td></tr></table></figure>
<p>for循环结构循环特性：先判断，后执行</p>
<p>使用场景：针对循环次数已知的情况下使用起来比较合适</p>
<h3><span id="2-4foreach循环"> 2-4：foreach循环</span></h3>
<p>foreach循环特性：它只针对数组或集合使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foreach循环语法:</span></span><br><span class="line"><span class="keyword">for</span>(数据类型 变量名 : 数组名 或 集合名称)&#123;</span><br><span class="line">    <span class="comment">// 处理语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="3break关键字"> 3：break关键字</span></h2>
<p>break关键字的作用：用于结束当前的条件结构或者循环结构。</p>
<p>注意：break关键字使用在switch结构和循环结构中</p>
<h2><span id="4continue关键字"> 4：continue关键字</span></h2>
<p>continue关键字的作用：该关键字只能够用于循环结构中，它表示结束当前 这一次 的循环，继续 下一次 的循环</p>
<h2><span id="5循环结构的总结重点"> 5：循环结构的总结（重点）</span></h2>
<p>循环四要素：</p>
<p>1：声明并初始化循环变量</p>
<p>2：设置循环条件（有多个条件的时候可以考虑使用逻辑运算符相连接）</p>
<p>3：编写循环体（循环执行的操作部分）</p>
<p>4：更新循环变量值（可以使用自增、自减或者用户输入）</p>
<h2><span id="6java中的数组了解"> 6：Java中的数组（了解）</span></h2>
<p>概念：数组可以理解为一个变量，存储 相同数据 类型的 一组 数据</p>
<p>数组的基本要素：</p>
<p>1、标识符：它是数组的名称，主要用于区分不同的数组</p>
<p>2、数组元素：数组中每个存储的数据都称为数组元素</p>
<p>3、元素的下标：是数组中每个元素所在的位置，下标从 0 开始计算，到数组的总长度减1的地方结束</p>
<p>4、元素类型：就是数组的数据类型，因为数组只能存储相同的数据类型的值</p>
<p><strong>注意：数组的长度是固定不变的，以免发生数组越界</strong></p>
<p>使用Java中的数组4部曲：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第1：声明数组语法:</span></span><br><span class="line">数据类型[] 数组名;</span><br><span class="line">数据类型 数组名[];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">String[] names;</span><br><span class="line"><span class="keyword">double</span> scores[];</span><br></pre></td></tr></table></figure>
<p><strong>注意：数组声明了并不代表就马上可以使用了，数组只有在初始化大小之后才能够正常使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第2: 初始化数组的语法:</span></span><br><span class="line">数据类型 数组名[] = <span class="keyword">new</span> 数据类型[ 数组的大小 ];</span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[ 数组的大小 ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">String names[] = <span class="keyword">new</span> String[<span class="number">30</span>];  <span class="comment">// 表示可以存放30位同学的姓名</span></span><br><span class="line"><span class="keyword">int</span>[] ages = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">// 表示可以存放10位同学的年龄</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第3: 给数组元素赋值语法:</span></span><br><span class="line">数组名[ 下标 ] = 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">String names[] = <span class="keyword">new</span> String[<span class="number">30</span>];</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">....</span><br><span class="line">names[<span class="number">29</span>] = <span class="string">&quot;xxx&quot;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第4: 根据数组下标获得元素值的语法:</span></span><br><span class="line">变量 = 数组名[下标];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">System.out.println(names[<span class="number">0</span>]); <span class="comment">// 输出数组元素的值</span></span><br><span class="line">zhangsan = names[<span class="number">1</span>];  <span class="comment">// 将数组元素的值赋给某一个变量进行存储</span></span><br></pre></td></tr></table></figure>
<p>给数组元素赋值分为两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1:静态给数组赋值方式</span></span><br><span class="line"><span class="comment">// 声明数组的同时给数组赋值</span></span><br><span class="line">数据类型[] 数组名 = &#123;值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3.</span>...&#125;;</span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3.</span>...&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">String[] names = &#123;<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> scores[] = <span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">88.5</span>,<span class="number">92.73</span><span class="number">.5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这样的静态赋值方式要求必须声明和赋值处于同一行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2: 动态给数组赋值方式（必须会）</span></span><br><span class="line"><span class="comment">// 第一步: 声明数组并初始化数组的大小</span></span><br><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[ 大小 ];</span><br><span class="line"><span class="comment">// 第二步：通过for循环中的循环变量来给数组每个元素进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如:</span></span><br><span class="line">String names[] = <span class="keyword">new</span> String[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; names.length ; i++ )&#123;</span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    System.out.print(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个学生的姓名:&quot;</span>);</span><br><span class="line">    <span class="comment">// 给数组的成员进行赋值</span></span><br><span class="line">    names[i] = input.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="今日内容"> 今日内容：</span></h2>
<p>1、嵌套循环</p>
<p>2、冒泡排序算法、插入法</p>
<p>3、类、对象、方法</p>
<hr>
<h2><span id="1嵌套循环"> 1：嵌套循环</span></h2>
<p>概念：当一个循环被完整的包含在另一个循环体中时，此时的循环结构就被称为嵌套循环</p>
<p><strong>嵌套循环的规律：外循环 1 次，内循环 多 次</strong></p>
<h2><span id="2冒泡排序算法必须掌握会默写"> 2：冒泡排序算法(必须掌握,会默写)</span></h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   数组 + 嵌套循环实现案例</span></span><br><span class="line"><span class="comment"> *    冒泡排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDemo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 分析:</span></span><br><span class="line">        <span class="comment">// 1: 创建一个输入对象</span></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 2: 声明一个可以保存 5 个数值的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="comment">// 3: 提示用户输入 5 个数值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个数字:&quot;</span>);</span><br><span class="line">            numbers[i] = in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4: 利用嵌套 for 循环来进行冒泡排序</span></span><br><span class="line">        <span class="comment">// 5: 外循环：控制比较的轮次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 6: 内循环：控制每一轮比较的次数(每比较一轮要少比较一次)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numbers.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>( numbers[j] &gt; numbers[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">// 7: 在内循环中设置一个临时变量用户交换数组中两个元素里的值</span></span><br><span class="line">                    <span class="keyword">int</span> temp = numbers[j];</span><br><span class="line">                    numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">                    numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8: 打印显示排序后的效果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后效果如下:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n:numbers) &#123;</span><br><span class="line">            System.out.print(n + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="3-类和对象重难点"> 3： 类和对象（重难点）</span></h2>
<p>概念：</p>
<p>类：类指的就是一种类型，Java中常有的基本数据类型就是其中之一</p>
<p>对象：指的是所属某一个类型的客观存在的真实实物（看得见，摸得着的都称为对象）</p>
<p>属性：一般为名词，指的是对象所具有的公共特征（例如：姓名、年龄、身高、体重等等）</p>
<p>方法：一般为动词，指的是对象所具有的公共行为（例如：吃、喝、拉、撒、跑、跳等等）</p>
<p><strong>记住一句话：类是对象的类型、对象是类的实例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义类的语法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类型名称</span>&#123;</span><br><span class="line">	数据类型  属性名<span class="number">1</span>;</span><br><span class="line">	数据类型  属性名<span class="number">2</span>;</span><br><span class="line">	数据类型  属性名<span class="number">3</span>;</span><br><span class="line">	......</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 方法1();</span></span><br><span class="line">	<span class="comment">// 方法2();</span></span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用对象的步骤:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步：</span></span><br><span class="line">   类名 对象名 = <span class="keyword">new</span> 类名(); <span class="comment">// 类名可以理解跟变量名是一样的，都要有意义的存在</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 第二步:</span></span><br><span class="line">   通过对象的 <span class="string">&quot; . &quot;</span> 符号类访问类中定义的成员（成员属性 和 成员方法）</span><br><span class="line">   对象名.属性名 = 属性值;</span><br><span class="line">   </span><br><span class="line">   对象名.方法名();   <span class="comment">// 调用方法，执行方法里面的代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义学校类型</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *   学校类的定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  学校类的属性(特征)定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String xiaoming;    <span class="comment">// 学校名称的属性</span></span><br><span class="line">    <span class="keyword">int</span> jiaoshishuliang;   <span class="comment">// 学校教室数量的属性</span></span><br><span class="line">    <span class="keyword">int</span> jifangshuliang;   <span class="comment">// 学校机房数量的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   学校类的方法(行为)定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 展示学校信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ZhanShi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到:&quot;</span>+xiaoming+<span class="string">&quot;\n学校教室数量有:&quot;</span>+jiaoshishuliang+<span class="string">&quot;间\n机房数量有:&quot;</span>+jifangshuliang+<span class="string">&quot;间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试学校类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试学校类的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSchool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1: 实例化两个学校类型的对象</span></span><br><span class="line">        School wenlixueyuan = <span class="keyword">new</span> School();</span><br><span class="line">        School wuhandaxue = <span class="keyword">new</span> School();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: 给学校类型的对象赋值</span></span><br><span class="line">        wenlixueyuan.xiaoming = <span class="string">&quot;文理学院&quot;</span>;</span><br><span class="line">        wenlixueyuan.jiaoshishuliang = <span class="number">80</span>;</span><br><span class="line">        wenlixueyuan.jifangshuliang = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        wuhandaxue.xiaoming = <span class="string">&quot;武汉大学&quot;</span>;</span><br><span class="line">        wuhandaxue.jiaoshishuliang = <span class="number">500</span>;</span><br><span class="line">        wuhandaxue.jifangshuliang = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: 调用展示学校信息的方法</span></span><br><span class="line">        wenlixueyuan.ZhanShi();</span><br><span class="line">        wuhandaxue.ZhanShi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="案例"> 案例</span></h2>
<h3><span id="案例一"> 案例一：</span></h3>
<p>School.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tedu.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 学校类的定义</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *  学校类的属性(特征)定义</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       String xiaoming;    <span class="comment">// 学校名称的属性</span></span><br><span class="line">       <span class="keyword">int</span> jiaoshishuliang;   <span class="comment">// 学校教室数量的属性</span></span><br><span class="line">       <span class="keyword">int</span> jifangshuliang;   <span class="comment">// 学校机房数量的属性</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *   学校类的方法(行为)定义</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 展示学校信息的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ZhanShi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到:&quot;</span>+xiaoming+<span class="string">&quot;\n学校教室数量有:&quot;</span>+jiaoshishuliang+<span class="string">&quot;间\n机房数量有:&quot;</span>+jifangshuliang+<span class="string">&quot;间&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>TestSchool.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tedu.demo1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 测试学校类的</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSchool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 1: 实例化一个学校类型的对象</span></span><br><span class="line">       School wenlixueyuan = <span class="keyword">new</span> School();</span><br><span class="line">       School wuhandaxue = <span class="keyword">new</span> School();</span><br><span class="line">       School huazhongkeji = <span class="keyword">new</span> School();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2: 给学校类型的对象赋值</span></span><br><span class="line">       wenlixueyuan.xiaoming = <span class="string">&quot;文理学院&quot;</span>;</span><br><span class="line">       wenlixueyuan.jiaoshishuliang = <span class="number">80</span>;</span><br><span class="line">       wenlixueyuan.jifangshuliang = <span class="number">200</span>;</span><br><span class="line">       </span><br><span class="line">       wuhandaxue.xiaoming = <span class="string">&quot;武汉大学&quot;</span>;</span><br><span class="line">       wuhandaxue.jiaoshishuliang = <span class="number">500</span>;</span><br><span class="line">       wuhandaxue.jifangshuliang = <span class="number">1000</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 3: 调用展示学校信息的方法</span></span><br><span class="line">       wenlixueyuan.ZhanShi();</span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">       wuhandaxue.ZhanShi();</span><br><span class="line">       System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">       huazhongkeji.ZhanShi();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3><span id="案例二"> 案例二：</span></h3>
<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tedu.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 学生类型</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *   定义属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String name;   <span class="comment">// 学生的姓名属性</span></span><br><span class="line">        <span class="keyword">int</span> age;       <span class="comment">// 学生的年龄属性</span></span><br><span class="line">        String className;   <span class="comment">// 学生所在班级名称的属性</span></span><br><span class="line">        String hobby;  <span class="comment">// 学生的爱好属性</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *   定义方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 展示学生信息的方法（自我介绍的方法）</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好,我的名字叫:&quot;</span>+name+<span class="string">&quot;,今年:&quot;</span>+age+<span class="string">&quot;岁,我所在的班级是:&quot;</span>+className+<span class="string">&quot;,我的爱好是:&quot;</span>+hobby);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>Teacher.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tedu.demo2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *   定义老师类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  定义属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         String name;  <span class="comment">// 老师的姓名属性</span></span><br><span class="line">         String pro;   <span class="comment">// 老师的专业方向</span></span><br><span class="line">         String course;  <span class="comment">// 老师的授课方向</span></span><br><span class="line">         <span class="keyword">int</span> workOfYear;  <span class="comment">// 教龄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  定义方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 展示老师信息的方法（老师的自我介绍方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大家好,我的名字叫：&quot;</span>+name+<span class="string">&quot;,我的专业方向是:&quot;</span>+pro+<span class="string">&quot;,主要教授:&quot;</span>+course+<span class="string">&quot;课程,我的教龄有:&quot;</span>+workOfYear+<span class="string">&quot;年&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.tedu.demo2;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line"> * 测试类</span><br><span class="line">    */</span><br><span class="line">   public class Test &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">       // 1：声明一个学生和老师对象</span><br><span class="line">       Student guojunjie = new Student();</span><br><span class="line">       Student xuxinmiao = new Student();</span><br><span class="line">       Teacher zhangxian = new Teacher();</span><br><span class="line"></span><br><span class="line">       // 2: 给学生和老师的属性赋值</span><br><span class="line">       guojunjie.name = &quot;郭俊杰&quot;;</span><br><span class="line">       guojunjie.age = 18;</span><br><span class="line">       guojunjie.className = &quot;计科3班&quot;;</span><br><span class="line">       guojunjie.hobby = &quot;玩游戏&quot;;</span><br><span class="line">       </span><br><span class="line">       xuxinmiao.name = &quot;许鑫淼&quot;;</span><br><span class="line">       xuxinmiao.age = 16;</span><br><span class="line">       xuxinmiao.className = &quot;信管1班&quot;;</span><br><span class="line">       xuxinmiao.hobby = &quot;看小说&quot;;</span><br><span class="line">       </span><br><span class="line">       zhangxian.name = &quot;张弦&quot;;</span><br><span class="line">       zhangxian.pro = &quot;Java EE&quot;;</span><br><span class="line">       zhangxian.course = &quot;Java开发&quot;;</span><br><span class="line">       zhangxian.workOfYear = 16;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 3：调用学生和老师的自我介绍方法</span><br><span class="line">        guojunjie.showInfo();</span><br><span class="line">        xuxinmiao.showInfo();</span><br><span class="line">        zhangxian.showInfo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="案例三"> 案例三：</span></h3>
]]></content>
      <categories>
        <category>专业实习</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>调度算法的评价指标</title>
    <url>/2021/10/25/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><ul>
<li><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li><p><a href="#CPU利用率">CPU利用率</a></p>
</li>
<li><p><a href="#系统吞吐量">系统吞吐量</a></p>
</li>
<li><p><a href="#周转时间">周转时间</a></p>
</li>
<li><p><a href="#等待时间">等待时间</a></p>
</li>
<li><p><a href="#响应时间">响应时间</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h2><p>CPU利用率：指CPU“忙碌”的时间占总时间的比例。</p>
<script type="math/tex; mode=display">
利用率=\frac{忙碌的时间}{总时间}</script><p><img src="https://i.loli.net/2021/10/25/qNiokeCWAmBQjJL.png" alt="image.png"></p>
<h2 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h2><p>系统吞吐量：单位时间内完成作业的数量</p>
<script type="math/tex; mode=display">
系统吞吐量=\frac{总共完成了多少道作业}{总共花了多少时间}</script><p><img src="https://i.loli.net/2021/10/25/4hwXRDIcQkCKVNT.png" alt="image.png"></p>
<h2 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h2><p>周转时间：指从<strong>作业被提交给系统</strong>开始，到<strong>作业完成为止</strong>的这段时间间隔。</p>
<p><img src="https://i.loli.net/2021/10/25/rtxZ61BEsXQSecY.png" alt="image.png"></p>
<script type="math/tex; mode=display">
作业周转时间=作业完成时间-作业提交给系统的时间</script><script type="math/tex; mode=display">
平均周转时间=\frac{各作业周转时间之和}{作业数}</script><script type="math/tex; mode=display">
带权周转时间=\frac{作业周转时间}{作业实际运行时间}=\frac{作业完成时间-作业提交给系统的时间}{作业实际运行时间}</script><script type="math/tex; mode=display">
平均带权周转时间=\frac{各作业带权周转时间之和}{作业数}</script><h2 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h2><p>等待时间：指作业/进程<strong>处于等待处理机状态时间之和</strong>，等待时间越长，用户满意度越低</p>
<h2 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h2><p>响应时间：指从用户<strong>提交请求</strong>到<strong>首次产生响应</strong>所用的时间。</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title>调度算法</title>
    <url>/2021/10/25/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><ul>
<li>目录<ul>
<li><a href="#***先来先服务（FCFS，first come first serve）***">先来先服务（FCFS）</a></li>
<li><a href="#***短作业优先（SJF，shortest job first）***">短作业优先（SJF）</a></li>
<li><a href="#高响应比优先（HRRN，highest response ratio next）">高响应比优先（HRRN）</a></li>
<li><a href="#***时间片轮转（RR，round-robin）***">时间片轮转（RR）</a></li>
<li><a href="#优先级调度算法">优先级调度算法</a></li>
<li><a href="#多级反馈队列调度算法">多级反馈队列调度算法</a></li>
</ul>
</li>
</ul>
<blockquote>
<p>Tips：各种调度算法的学习思路：</p>
<p>1.算法思想</p>
<p>2.算法规则</p>
<p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>4.抢占式还是非抢占式</p>
<p>5.优缺点</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
</blockquote>
<h2 id="先来先服务（FCFS，first-come-first-serve）"><a href="#先来先服务（FCFS，first-come-first-serve）" class="headerlink" title="先来先服务（FCFS，first come first serve）"></a><strong><em>先来先服务（FCFS，first come first serve）</em></strong></h2><p>1.算法思想：</p>
<p>​        主要从“公平”的角度考虑（类似于生活中排队买东西）</p>
<p>2.算法规则：</p>
<p>​        按照作业/进程到达的先后顺序进行服务，事实上等待时间越久的越优先得到服务</p>
<p>3.这种调度算法是用于作业调度还是进程调度：</p>
<p>​        用于进程调度时：考虑哪个进程先到达就绪队列。</p>
<p>​        用于作业调度时：考虑哪个作业先到达后备队列。</p>
<p>4.抢占式还是非抢占式：</p>
<p>​        非抢占式的算法</p>
<p>5.优缺点：</p>
<p>​        优点：公平，算法实现简单</p>
<p>​        缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说用户体验不好（<strong>简单点：对于长作业有利，对短作业不利</strong>）</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）：</p>
<p>​        不会导致饥饿。</p>
<p><img src="https://i.loli.net/2021/10/23/b8Bv3qo2YHG1jyI.png" alt="image.png"></p>
<h2 id="短作业优先（SJF，shortest-job-first）"><a href="#短作业优先（SJF，shortest-job-first）" class="headerlink" title="短作业优先（SJF，shortest job first）"></a><strong><em>短作业优先（SJF，shortest job first）</em></strong></h2><p>1.算法思想</p>
<p>​        追求最少的平均等待时间，最少的平均周转时间，最少的平均带权周转时间</p>
<p>2.算法规则</p>
<p>​        最短作业/进程优先得到服务（最短：服务时间最短）</p>
<p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>​        用于进程调度时：称为“短进程优先算法”</p>
<p>​        用于作业调度时：</p>
<p>4.抢占式还是非抢占式</p>
<p>​        SJF和SPF是非抢占式算法，但也有抢占式的版本“最短剩余时间优先算法（SRTN）”</p>
<p>5.优缺点</p>
<p>​        优点：“最短的”平均等待时间，平均周转时间</p>
<p>​        缺点：不公平，<strong>对短作业有利，对长作业不利</strong>。可能产生<strong>饥饿现象</strong>。另外，作业/进程的运行时间是由用户提供的，并不一定真实，不一定能做到真正的短作业优先。</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
<p>​        会，如果源源不断地有短作业/进程到来，可能使长作业/进程长时间得不到服务，产生“<strong>饥饿</strong>”现象。如果一直得不到服务，则称为“<strong>饿死</strong>”</p>
<p><strong>非抢占式：</strong></p>
<p><img src="https://i.loli.net/2021/10/23/XCSWeRjyomK52N9.png" alt="image.png"></p>
<p><strong>抢占式：</strong></p>
<p><img src="https://i.loli.net/2021/10/23/WPQitrHOBCX9vEn.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2021/10/23/6zo4krbvBxTtWLH.png" alt="image.png"></p>
<p>Note：</p>
<p>1.如果题目中<strong>未特别说明</strong>，所提到的“短作业/进程优先算法”<strong>默认</strong>是<strong>非抢占式</strong>的</p>
<p>2.“SJF调度算法的平均等待时间，平均周转时间最少”——-该说法不严谨</p>
<p>严谨说法：</p>
<p>“在<strong>所有进程同时可运行</strong>时，采用SJF调度算法的平均等待时间，平均周转时间最少”或</p>
<p>“在<strong>所有进程都几乎同时到达</strong>时，采用SJF调度算法的平均等待时间，平均周转时间最少”或</p>
<p>“<strong>抢占式</strong>的短作业/进程优先调度算法（<strong>最短剩余时间优先，SRNT</strong>算法）的平均等待时间，平均周转时间最少”</p>
<p>3.虽然严格来说，SJF的平均等待时间，平均周转时间并不一定最少，但相比与其他算法（如：FCFS），SJF依然可以获得较少的平均等待时间，平均周转时间。</p>
<p>4.如果选择题中遇到“SJF算法的平均等待时间，平均周转时间最少”的选项 ，那最好判断其他选项，是不是有很明显的错误，如果没用更合适的选项，那也应该选择该选项。</p>
<h2 id="高响应比优先（HRRN，highest-response-ratio-next）"><a href="#高响应比优先（HRRN，highest-response-ratio-next）" class="headerlink" title="高响应比优先（HRRN，highest response ratio next）"></a><strong><em>高响应比优先（HRRN，highest response ratio next）</em></strong></h2><p>1.算法思想</p>
<p>​        要综合考虑作业/进程的等待时间和要求服务时间</p>
<p>2.算法规则</p>
<p>​        在每次调度时先计算各个作业/进程的<strong>响应比</strong>，选择<strong>响应比最高</strong>的作业/进程为其服务</p>
<p>​        </p>
<script type="math/tex; mode=display">
响应比=\frac{等待时间+要求服务时间}{要求服务时间} \ge 1</script><p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>​        即可用于作业调度，也可用于进程调度。</p>
<p>4.抢占式还是非抢占式</p>
<p>​        <strong>非抢占式</strong>算法，因此只有当前运行的作业/进程主动放弃处理机时，才需要调度，才需要计算响应         比。</p>
<p>5.优缺点</p>
<p>​        优点：综合考虑等待时间和运行时间（要求服务时间）</p>
<p>​                    等待时间相同时，要求服务时间最短的优先（SJF的优点）</p>
<p>​                    要求服务时间相同时，等待时间长的优先（FCFS的优点）</p>
<p>​                    对于长作业来说，随着等待时间越来越久，其响应比也会越来越大，从而避免了长作业饥                    饿的问题</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
<p>​    不会导致饥饿</p>
<p><img src="https://i.loli.net/2021/10/23/rJVfvLbXDHgapdS.png" alt="image.png"></p>
<h2 id="时间片轮转（RR，round-robin）"><a href="#时间片轮转（RR，round-robin）" class="headerlink" title="时间片轮转（RR，round-robin）"></a><strong><em>时间片轮转（RR，round-robin）</em></strong></h2><p>1.算法思想</p>
<p>​        公平地，轮流地为各个进程服务，让每个进程在一定时间间隔内都可以得到响应</p>
<p>2.算法规则</p>
<p>​        按照各个进程到达就绪队列的顺序，轮流让各个进程执行一个<strong>时间片</strong>（如：100ms）。若进程未        在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队</p>
<p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>​        用于调度进程（只用作业放入内存建立了相应的进程后，才能被分配处理机时间片）</p>
<p>4.抢占式还是非抢占式</p>
<p>​        若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法属于<strong>抢占        式</strong>的算法。由时钟装置发出<strong>时钟中断</strong>来通知CPU时间片已到</p>
<p>5.优缺点</p>
<p>​        优点：公平，响应快，适用于分时操作系统</p>
<p>​        缺点：由于高频率进程的切换，因此有一定的系统开销，不区分任务的紧急程度</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
<pre><code>     不会导致饥饿
</code></pre><p><img src="https://i.loli.net/2021/10/24/fqAphDa9rkZKIQn.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2021/10/24/ErlOj96xesRKkty.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2021/10/24/PSfq6JhxFdbQeLV.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2021/10/24/u41mEwySW5KMzXc.png" alt="image.png"></p>
<p>Note：时间片太大或太小分别有什么影响（选择题）</p>
<p>​        如果<strong>时间片太大</strong>，使得每个进程都可以在一个时间片内就完成，则时间片轮转调度算法<strong>退化为先来先服务</strong>调度算法，并且<strong>会增大进程响应时间</strong>。因此<strong>时间片不能太大</strong>。</p>
<p>​        另一方面，进程调度，切换是有时间代价的（保存，恢复运行环境），因此如果<strong>时间片太小</strong>，会导致<strong>进程切换过于频繁</strong>，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少。可见<strong>时间片也不能太小</strong>。</p>
<h2 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h2><p>1.算法思想</p>
<p>​        随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来        决定处理顺序</p>
<p>2.算法规则</p>
<p>​        每个作业/进程有各自的优先级。调度时选择优先级最高的作业/进程</p>
<p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>​        即可用于作业调度，也可用于进程调度。甚至，还会用于在之后学习的I/O调度中</p>
<p>4.抢占式还是非抢占式</p>
<p>​        抢占式，非抢占式都有。</p>
<p>​        做题时的区别在于：非抢占式只需要在进程主动放弃处理机时进行调度即可。而抢占式还需在就绪        队列变化时，检查是否会发生抢占。</p>
<p>5.优缺点</p>
<p>​        优点：用优先级区分紧急程度，重要程度。适用于实时操作系统。可灵活地调整对各种作业/进程                  的偏好程度。</p>
<p>​        缺点：若源源不断地有高优先级进程到来，则可能导致饥饿</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
<pre><code>     会发生饥饿
</code></pre><p><img src="https://i.loli.net/2021/10/24/NQ1YqOCF3APDM49.png" alt="image.png"></p>
<p><img src="https://i.loli.net/2021/10/24/TgSlXmaHDcrVN75.png" alt="image.png"></p>
<p>Note：</p>
<p>​        就绪队列未必只有一个，可以按照不同优先级来组织 。另外，也可以把优先级高的进程排在更靠近队头的位置。</p>
<p>​        根据优先级是否可以动态改变，可将优先级分为<strong>静态优先级</strong>和<strong>动态优先级</strong></p>
<p>​        静态优先级：创建进程时确定，之后一直不变。</p>
<p>​        动态优先级：创建进程时有一个初始值，之后会根据情况动态地调整优先级</p>
<p>如何合理地设置各类进程的优先级？</p>
<p>​        通常： 系统进程 &gt; 用户进程</p>
<p>​                    前台进程 &gt; 后台进程</p>
<p>​                    操作系统更偏好I/O进程（I/O繁忙型进程）</p>
<p>如果采用的是动态优先级，什么时候应该调整？</p>
<p>​        可以从追求公平。提升资源利用率等角度考虑。</p>
<p>​        如果某进程在就绪队列中等待了很长时间，则可以适当提升其优先级</p>
<p>​        如果某进程占用处理机运行了很长时间，则可适当降低其优先级</p>
<p>​        如果发现一个进程频繁地进行I/O操作，则适当提升其优先级</p>
<h2 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h2><p>1.算法思想</p>
<p>​        对以上算法的折中权衡</p>
<p>2.算法规则</p>
<p>​        1.设置多级就绪队列，各级队列优先级从高到低，时间片从小到大</p>
<p>​        2.新进程到达时先进入第1级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还未结           束，则进程进入下一级队列队尾。如果此时已经是在最下级的队列，则重新放回该队列队尾。</p>
<p>​        3.只有第K级队列为空时，才会为K+1级队头的进程分配时间片。</p>
<p>3.这种调度算法是用于作业调度还是进程调度</p>
<p>​        用于进程调度</p>
<p>4.抢占式还是非抢占式</p>
<p>​        抢占式算法。在K级队列的进程运行过程中，若更上级的队列（1~k-1级）中进入了一个新进程，则        由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回K级队列的        队尾</p>
<p>5.优缺点</p>
<p>6.是否会导致饥饿（饥饿：某进程/作业长期得不到服务）</p>
<p>​        会导致饥饿</p>
<p><img src="https://i.loli.net/2021/10/24/ZNuC1bncA4oxBgO.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title>线程</title>
    <url>/2021/10/17/%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>线程</strong>——比进程更小的能<strong>独立运行</strong>的基本单位</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>定义：是作为调度和分派的基本单位，不同时作为拥有资源的单位</p>
<p>目的：是为了减少程序在并发执行时所付出的时空开销，使OS具有更好的并发性</p>
<h2 id="线程与进程（理解为：继承父子关系）"><a href="#线程与进程（理解为：继承父子关系）" class="headerlink" title="线程与进程（理解为：继承父子关系）"></a>线程与进程（理解为：继承父子关系）</h2>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/10/08/JSP%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>title: JSP语法<br>date: 2021-10-08 10:43:23<br>tags:“JSP”<br>categories: “编程语言”<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	response.sendRedirect(request.getContextPath()+&quot;/login.jsp&quot;);</span><br><span class="line"> %&gt;</span><br></pre></td></tr></table></figure></p>
<p>response处理用户请求;</p>
<p>sendRedirect()函数的作用是重定向网页，向浏览器发送一个特殊的Header，然后由浏览器来做重定向，转到指定的页面;</p>
<p>request是获取用户的请求;</p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h2 id="Servlet类"><a href="#Servlet类" class="headerlink" title="Servlet类"></a>Servlet类</h2><p>Servlet的类就是编写一个特殊类“HttpServlet”（javax.servlet.http包中的HttpServlet）的子类。</p>
<p>HttpServlet实现了Servlet接口，实现了响应用户的方法。</p>
<p>为了便于Web应用程序的管理，Servlet类应该具有包（package）名</p>
<h2 id="字节码文件的保存"><a href="#字节码文件的保存" class="headerlink" title="字节码文件的保存"></a>字节码文件的保存</h2><p>为了能让Tomcat服务器使用某个java类创建一个Servlet，需要将该java类源文件产生的 .class 字节码文件按照类的包名对应的目录路径保存到Web服务目录中的特定子目录（<strong>保存到WEB-INF\classes\包名</strong>）</p>
]]></content>
  </entry>
  <entry>
    <title>VScode创建JSP项目</title>
    <url>/2021/10/07/VScode%E5%88%9B%E5%BB%BAJSP%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="在vscode中按下ctrl-shift-p-输入maven点击下图指出项-上图-或者在工作区右键选择-下图"><a href="#在vscode中按下ctrl-shift-p-输入maven点击下图指出项-上图-或者在工作区右键选择-下图" class="headerlink" title="在vscode中按下ctrl+shift+p, 输入maven点击下图指出项(上图)或者在工作区右键选择(下图)"></a>在vscode中按下ctrl+shift+p, 输入maven点击下图指出项(上图)或者在工作区右键选择(下图)</h2><p><img src="https://i.bmp.ovh/imgs/2021/10/114e7d1ea404202f.png" alt=""></p>
<p><img src="https://i.bmp.ovh/imgs/2021/10/7b84f1fbd84f1151.png" alt=""></p>
<h2 id="输入web，选择maven-archetype-webapp回车"><a href="#输入web，选择maven-archetype-webapp回车" class="headerlink" title="输入web，选择maven-archetype-webapp回车"></a>输入web，选择maven-archetype-webapp回车</h2><p><a href="https://imgtu.com/i/59mF4f"><img src="https://z3.ax1x.com/2021/10/07/59mF4f.png" alt="59mF4f.png"></a></p>
<h2 id="选择1-4"><a href="#选择1-4" class="headerlink" title="选择1.4"></a>选择1.4</h2><p><img src="https://i.bmp.ovh/imgs/2021/10/d5f288f88b08594b.png" alt=""></p>
<h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      <categories>
        <category>编译器</category>
      </categories>
      <tags>
        <tag>编译器新建项目</tag>
      </tags>
  </entry>
  <entry>
    <title>偏导数</title>
    <url>/2021/10/06/%E5%81%8F%E5%AF%BC%E6%95%B0/</url>
    <content><![CDATA[<p>Q：什么是增量？</p>
<p>A：当平面上一个质点从一点移动到另一点，其坐标的纯改变或增量通过把<strong>终点坐标减去起点坐标</strong>而求得。</p>
<h2 id="此节会用到的增量"><a href="#此节会用到的增量" class="headerlink" title="此节会用到的增量"></a>此节会用到的增量</h2><script type="math/tex; mode=display">
F(x,y)在M_{0}处关于x的偏增量：</script><script type="math/tex; mode=display">
\Delta Zx=f(x_{0} +\Delta x ,y_{0})-f(x_{0},y_{0}) 或f(x,y_{0})-f(x_{0},y_{0})</script><script type="math/tex; mode=display">
F(x,y)在M_{0}处关于y的偏增量：</script><script type="math/tex; mode=display">
\Delta Zy=f(x_{0} ,y_{0}+\Delta y)-f(x_{0},y_{0}) 或f(x_{0},y)-f(x_{0},y_{0})</script><script type="math/tex; mode=display">
F(x,y)在M_{0}处的全增量</script><script type="math/tex; mode=display">
\Delta Z=f(x_{0}+\Delta x ,y_{0}+\Delta y)-f(x_{0},y_{0}) 或f(x,y)-f(x_{0},y_{0})</script><h1 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h1><p>定义：</p>
<script type="math/tex; mode=display">
z=f(x,y){\color{Blue} } ,((x，y)\in D,f(x,y)在(x,y)处对x,y皆可偏导，称 ，IF \forall (x_{0},y_{0})\in D,f(x,y)在(x,y)处对x,y皆可偏导，称{fx}' (x,y),{fy}' (x,y)为f(x,y)对x,y的偏导数，称为偏导数</script><p>已知：</p>
<script type="math/tex; mode=display">
z=f(x,y){\color{Blue} } ,((x，y)\in D ),M_{0}(x_{0},y_{0})</script><script type="math/tex; mode=display">
IF \lim_{\Delta x \to 0} \frac{\Delta Z_{x} }{\Delta x} \quad \exists \quad称f(x,y)在M_{0}处关于x可偏导，极限值称为f(x,y)在M_{0}处关于x的偏导数，记：\\{fx}' (x_{0},y_{0})
，\frac{\partial z}{\partial x} |_{(x_{0},y_{0})}</script><script type="math/tex; mode=display">
IF \lim_{\Delta y \to 0} \frac{\Delta Z_{y} }{\Delta y}\quad \exists\quad 称f(x,y)在M_{0}处关于y可偏导，极限值称为f(x,y)在M_{0}处关于y的偏导数，记：\\{fy}' (x_{0},y_{0})
，\frac{\partial z}{\partial y} |_{(x_{0},y_{0})}</script><p>简记为：</p>
<script type="math/tex; mode=display">
\lim_{\Delta x \to 0} \frac{\Delta Z_{x} }{\Delta x}={fx}' (x_{0},y_{0})
，\frac{\partial z}{\partial x} |_{(x_{0},y_{0})}</script><script type="math/tex; mode=display">
\lim_{\Delta y \to 0} \frac{\Delta Z_{y} }{\Delta y}={fy}' (x_{0},y_{0})
，\frac{\partial z}{\partial y} |_{(x_{0},y_{0})}</script><p><strong>解法：</strong></p>
<p>​        <strong>求x的偏导数时，将所求式子中除了x以外的未知数全部当作常数进行求导</strong></p>
<p>​        <strong>求y的偏导数时，将所求式子中除了y以外的未知数全部当作常数进行求导</strong></p>
<p>​        <strong>求偏导数就是求出x的偏导数和y的偏导数</strong></p>
<h1 id="高阶偏导数"><a href="#高阶偏导数" class="headerlink" title="高阶偏导数"></a>高阶偏导数</h1><h3 id="二阶偏导数求解："><a href="#二阶偏导数求解：" class="headerlink" title="二阶偏导数求解："></a>二阶偏导数求解：</h3><p>​            解法：</p>
<script type="math/tex; mode=display">
1.先求\quad\frac{\partial z}{\partial x}，\frac{\partial z}{\partial y}</script><script type="math/tex; mode=display">
2.再求\quad\frac{\partial^{2}z}{\partial x^{2}} ，\frac{\partial^{2}z}{\partial y^{2}} ,\frac{\partial^{2}z}{\partial x\partial y} ,\frac{\partial^{2}z}{\partial y\partial x}</script>]]></content>
      <categories>
        <category>高等数学</category>
      </categories>
      <tags>
        <tag>多元函数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo创建并发布博客</title>
    <url>/2021/09/26/Hexo%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>首先按win+r，输入cmd进入cmd界面</p>
<p><img src="https://i.loli.net/2021/09/26/nRaxrCOS7l5vhze.png" alt="image.png"></p>
<p>进入之后，直接输入你博客所在的磁盘盘符（C盘，D盘等），并按下回车建，进入目标磁盘的根目录</p>
<p>ps:由于我放在”I盘”中，所以我要输入” i：“</p>
<p><img src="https://i.loli.net/2021/09/26/fz6rivQBHt3aKY7.png" alt="image.png"></p>
<p>随后输入 cd   博客项目文件夹   <strong>(注：cd 后一定要有空格)</strong></p>
<p><img src="https://i.loli.net/2021/09/26/MpXrKFh1Ume5S6l.png" alt="image.png"></p>
<p>进入到项目的根目录之后就可以输入以下代码了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#新建博客</span><br><span class="line">hexo new &quot;博客标题&quot;</span><br><span class="line"></span><br><span class="line">#运行本地服务(预览你的博客)</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">#生成静态文件</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">#完成部署</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">#清除缓存文件和已生成的静态文件</span><br><span class="line">hexo clean</span><br><span class="line">//在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行该命令</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
